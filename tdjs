#!/bin/bash
# Time-stamp: <2022-05-22 19:45:01 rene>
#
# Copyright (C) 2017 Rene Maurer
# This file is part of tangodjsforgoodsound.
#
# tangodjsforgoodsound is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# tangodjsforgoodsound is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# ----------------------------------------------------------------------

help() {
    echo
    echo "Parameter 1: REQUIRED"
    echo "             start   -> start server"
    echo "             kill    -> kill server"
    echo "             restart -> restart server"
    echo "             clearsessions -> clear expired sessions"
    echo "             getdb   -> get database from remote"
    echo "             dist    -> rsync sources (without database)"
    echo "             newcss  -> create new css"
    echo "             doc     -> copy doc to static"
    echo "             push    -> push things to github"
    echo
    echo "             dbc     -> check if database must be migrated"
    echo "             dbm     -> create/make database migrations"
    echo "             dba     -> apply database migrations"
    echo "             dbba    -> make a copy of the database => db.sqlite3.$(date +%Y-%m-%d)"
    echo "             dbbad   -> make a copy of the database => db.sqlite3.$(date +%d)"
    echo
    echo "             lastc   -> last staged changes with statistic (see param 2)"
    echo "             acron   -> apply crontab from crontab file"
    echo
    echo "Parameter 2: OPTIONAL"
    echo "             test    -> test-server"
    echo "             prod    -> productive-server"
    echo "             silent  -> silent operation"
    echo "             commit  -> only for lastc (use last commit insread of last staged)"
    echo
    echo "Parameter 3: OPTIONAL"
    echo "             silent  -> silent operation"
    echo
    VERSIONFILE="tangodjsforgoodsound/version.py"
    if [ -f $VERSIONFILE ]; then
        echo "Version:     $(python $VERSIONFILE)"
        echo
    fi
    exit 1
}


localdir=~/Data/tangodjsforgoodsound.info/tdjsfgs
remotedir=hgajgfdsajgfajshgfahsg
UBERSPACE=
SILENT=
NAM=
if [ ! -e /home/rene ]; then
    PYTHON=$(which python3.9)    
else
    PYTHON=$(which python3)
fi
PORT=
DBSAVEDIR=dbsaves

# check if we are remote
for h in /home/tdjsfgs /home/rem; do
    x=$h/ALL/mysite
    if [ -e $x ]; then
	remotedir=$x
	WORKDIR=$remotedir
	DBSAVEDIR=$h/DBSAVES
	PORT=63762
	break
    fi
done


if [ ! -e $remotedir ]; then
    WORKDIR=$localdir
    PORT=8000
    if [ "$2" = "prod"  ]; then
	remotedir=/home/tdjsfgs/ALL/mysite
	UBERSPACE=uberspace3
	NAM=PROD
    fi
    if [ "$2" = "test"  ]; then
	remotedir=/home/rem/ALL/mysite
	UBERSPACE=uberspace1
	NAM=TEST
    fi
fi


if [ "$2" = "silent" ] || [ "$3" = "silent" ]; then
    SILENT=silent
fi


info() {
    if [ ! "$SILENT" = "silent" ]; then
        date "+%Y-%m-%d %H:%M:%S $1"
    fi
    if [ -d $remotedir ]; then
	date "+%Y-%m-%d %H:%M:%S $1" >> $remotedir/INFO.log
    fi
}


startserver() {
    cd $WORKDIR
    if [ ! -d $remotedir ]; then
	info "Server start"
        $PYTHON manage.py runserver 0.0.0.0:$PORT
	exit 0
    fi
    SERVER_STARTED=$(netstat -tulpen | grep $PORT)
    if [ -d /home/rem ]; then
	REMOTE=tdjsfgs@tdjsfgs.uber.space:.qmail-cumparsita
	FILE=/home/rem/ALL/mysite/qmail-cumparsita
	rm -f $FILE
        # echo "scp -i /home/rem/.ssh/id_rsa_3072_uberspace3 $REMOTE $FILE"
        scp -i /home/rem/.ssh/id_rsa_3072_uberspace3 $REMOTE $FILE > /dev/null 2>&1
        if [ -f /home/rem/tdjsfgs_force_start ]; then
	    touch $FILE
            echo "/home/rem/tdjsfgs_force_start found"
        fi
        if [ ! -f $FILE ]; then
	    info "$FILE not found - kill server"
	    if [ "$SERVER_STARTED" ]; then
		killserver
	    else
		info "Server already killed"
	    fi
	    exit 0
	fi
    fi
    if [ ! "$SERVER_STARTED" ]; then
	info "Server start"
	X=$(uberspace web backend list | grep $PORT)
	if [ ! "$X" ]; then
	    uberspace web backend set / --http --port $PORT
	fi
	$PYTHON manage.py runserver 0.0.0.0:$PORT --noreload &
    else
	info "Server already started"
    fi
}


killserver() {
    pkill -f runserver
    info "Server killed"
    sleep 2
}


if [ "$1" = "kill" ]; then
    killserver
    exit 0
fi


if [ "$1" = "start" ]; then
    startserver
    exit 0
fi


if [ "$1" = "restart" ]; then
    killserver
    startserver
    exit 0
fi


if [ "$1" = "clearsessions" ]; then
    cd $WORKDIR
    $PYTHON manage.py clearsessions
    exit 0
fi


if [ "$1" = "doc" ]; then
    cd RESOURCES
    DST=tangodjsforgoodsound/static
    rsync -avz --delete  --exclude *~ Kontakte_zu_Usern_o_Publik* ../$DST
    rsync -avz --delete  --exclude *~ releasenotes_* ../$DST
    rsync -avz --delete  --exclude *~ tdjsfgs_testing* ../$DST
    rsync -avz --delete  --exclude *~ tdjsfgs.docx tdjsfgs.pdf ../$DST
    echo "$DST READY"
    exit 0
fi


if [ "$1" = "push" ]; then
    git push origin master
    exit 0
fi


if [ "$1" = "getdb" ]; then
    if [ ! "$2" = "prod"  ] && [ ! "$2" = "test"  ]; then
	echo ">>> Additional parameter (prod | test) required"
	exit 0
    fi
    if [ -d $localdir ]; then
	DBF=db.sqlite3
	now=$(date +"%y%m%d%H%M")
	scp $UBERSPACE:$remotedir/$DBF ./$NAM.$DBF.$now
	echo "$NAM.$DBF.$now created"
    else
	echo "$localdir not found"
    fi
    exit 0
fi


if [ "$1" = "dist" ] && ([ "$2" = "prod"  ] || [ "$2" = "test"  ]); then
    if [ -d $localdir ]; then
	if [ ! $PWD = $localdir ]; then
	    echo
	    echo "We are in $PWD"
	    echo "... and not in $localdir"
	    echo ">>> Do noting and exit"
	    exit 0
	fi
        echo "rsync $localdir/* => $UBERSPACE:$remotedir"
        rsync -avz --delete --exclude *~ --exclude *pyc --exclude .git --exclude *info.log* \
	      --exclude *db.sqlite3* --exclude dbsaves --exclude *style.css --exclude *pycache__ \
              --exclude tdjsfgs.log --exclude RESOURCES --exclude tmp* \
              $localdir/* $UBERSPACE:$remotedir
        echo
        date +"%Y-%m-%d %H:%M:%S"
        echo "login to $UBERSPACE and start the server"
        ssh $UBERSPACE
	echo
    else
	echo "$localdir not found"
    fi
    exit 0
fi


if [ "$1" = "newcss" ]; then
    if [ -d $localdir ]; then
        STYLE_DIR=$WORKDIR/tangodjsforgoodsound/static
        rm -f $STYLE_DIR/style_20*.css
        now=$(date +"%Y%m%d_%H%M")
	newcss=$STYLE_DIR/style_$now.css
	cp $STYLE_DIR/style.css $newcss
        echo "$newcss created"
	F=$WORKDIR/tangodjsforgoodsound/templates/base.html
	$WORKDIR/replacecss.py -c "$F" "style_$now.css"
        echo "$F adjusted"
    else
	echo "$localdir not found"
    fi
    exit 0
fi


if [ "$1" = "dbc" ]; then
    $PYTHON manage.py makemigrations --check --dry-run
    exit 0
fi


if [ "$1" = "dbm" ]; then
    $PYTHON manage.py makemigrations
    exit 0
fi


if [ "$1" = "dba" ]; then
    cp $WORKDIR/db.sqlite3 $DBSAVEDIR/db.tmp.beforemigration.sqlite3.$(date +'%Y-%m-%d')
    echo "Database backup created: $DBSAVEDIR/db.sqlite3.tmp.beforemigration.$(date +'%Y-%m-%d')"
    $PYTHON manage.py migrate
    exit 0
fi


if [ "$1" = "dbba" ]; then
    cp $WORKDIR/db.sqlite3 $DBSAVEDIR/db.sqlite3.$(date +'%Y-%m-%d')
    echo "Database backup created: $DBSAVEDIR/db.sqlite3.$(date +'%Y-%m-%d')"
    exit 0
fi


if [ "$1" = "dbbad" ]; then
    cp $WORKDIR/db.sqlite3 $DBSAVEDIR/db.sqlite3.$(date +'%d')
    echo "Database backup created: $DBSAVEDIR/db.sqlite3.$(date +'%d')"
    exit 0
fi

if [ "$1" = "lastc" ]; then
    if [ "$2" = commit ]; then
	git --no-pager log --stat -n1
    else
	git --no-pager diff --stat --cached
    fi
    exit 0
fi

if [ "$1" = "acron" ]; then
    if [ -d $remotedir ]; then
	if [ -f $remotedir/crontab ]; then
	    cat $remotedir/crontab | crontab -
	    echo "$remotedir/crontab applied"
	    exit 0
	fi
    fi
fi

# wrong input parameters
help
